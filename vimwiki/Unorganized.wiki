= Option scope =

Options can be global or local to a window or buffer. 

Global options are shared across all buffers and windows. Changing a global option in one buffer or window affects the value everywhere else. So called global-local options are global options that can be changed to buffer- or window-local ('statusline' is the only global-local window option). Doing so sets a different, unshared value for one or more buffers or windows. In other words, a local copy is optional. A local value for a global-local option can be removed via set {option}<.

Each buffer and window has its own copy of a local option. Local options have global and local values.
1. Splitting a window copies the local window options (i.e., global and local value). When a new buffer is loaded into a window, the local value of local window options are set to the global values. When a previously edited buffer is loaded into a window, the local values of the local window options at the time the buffer was unloaded (:e <other-buffer> or :q) in this window are retrieved; otherwise, the local values from the window where the buffer was last unloaded are retrieved. This behavior is easily tested with the numeric, window-local option 'cc' or the boolean option 'list'. To recap, global values for window local options are global for buffers in the window, and local window values are local to buffers in the window. Each window can have its own global value, and the same buffer in different windows can have different local values.
2. New buffers initialize buffer-local options with the global values of the current buffer. This is done upon buffer editing/entry (:e), rather than creation (:e or :badd), by default (with 's' in 'cpoptions'). Global values are shared between all buffers. Local values are specific to a buffer. This is independent of window (e.g., same buffer in multiple places). Test with 'cink'.

= Spacemacs =

== Autoloading ==

The call to autoloaded function myplugin#somefile#Hello() searches inside
~/.vim/autoload/myplugin/somefile. In other words, an autoloaded function
is defined and called with prefixes representing the path relative to
~/.vim/autoload/. To explicitly source an autoloaded file to get access
during init.vim, use the runtime command with a path relative to an entry in &rtp
(e.g., runtime autoload/clap/providers/buffers.vim).

== Project Layout ==

Aside from the SpaceVim main repository, there are also repositories for:
- ctrlp
- unite[-ctags|-unicode]
- denite
- gtags
- luacomplete
- vim-material
- vim-lookup

== The main repository's structure: ==
init.vim/vimrc/ginit.vim: Calls config/main.vim
config/main.vim: sets g:_spacevim_root_dir. Sets runtimepath (though this doesn't
  seem to be its final value), then calls:
  SpaceVim#begin: Loads user init.vim. Parses cmd line args. Sets default vim
    options. Loads default layers. Sets default keybindings. Defines SP*
    commands.
  SpaceVim#custom#load: Seems to process user init.toml.
  SpaceVim#end: Seems to map everything.
config/plugins/
config/plugins_before/
autoload/
  Spacevim.vim: Sets Spacevim option defaults, defines Spacevim#begin and
    Spacevim#end
  Spacevim
    api/ (public APIs/libraries)
    layers/
    plugins/
    mapping/

== Mostly empty or miscellaneous: ==
  doc/ (help)
  docs/ (website)
  .Spacevim.d/: Seems like the configuration folder for the devs
  Lua/: ./spacevim/api/vim/window.lua may affect the cursor.
  ftplugin/: Something with airline and statusline.
  bin/: One-liner shell scripts calling nvr (nvim-remote) or vim
  colors/: Contains a single script that seems to define a 'Spacevim' color
           scheme that doesn't seem to be used
  mode/: Basic configuration examples. *.toml is copied to ~/.Spacevim.d/ after
  the first startup prompt

Language layer provides completion, syntax checking, find def and refs,
formatting, syntax highlighting, and indent

== Misc ==

s: windows leader

== Plugins of interest (in spacevim or not) ==

- vim-ctrlspace: per-tab windows lists, labeled tabs, and tabs list
- undotree / vim-mundo

== Help ==

https://gitter.im/SpaceVim/SpaceVim

== Debugging ==
Test in docker: https://github.com/SpaceVim/SpaceVim/tree/master/docker
Search :h spacevim for log, debug, etc.

== Sources ==
Project Layout
  - https://github.com/SpaceVim/SpaceVim/wiki/Project-layout
  - https://github.com/SpaceVim/SpaceVim
https://medium.com/swlh/spacevim-layers-under-the-hood-3dba2a02d13a
